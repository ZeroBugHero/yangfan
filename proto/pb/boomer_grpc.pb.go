// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.0--rc2
// source: boomer.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BoomerSerClient is the client API for BoomerSer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BoomerSerClient interface {
	Start(ctx context.Context, in *StartReq, opts ...grpc.CallOption) (*StartResp, error)
	Rebalance(ctx context.Context, in *RebalanceReq, opts ...grpc.CallOption) (*RebalanceResp, error)
	Work(ctx context.Context, in *WorkReq, opts ...grpc.CallOption) (*WorkResp, error)
	Master(ctx context.Context, in *MasterReq, opts ...grpc.CallOption) (*MasterResp, error)
	Stop(ctx context.Context, in *StopReq, opts ...grpc.CallOption) (*StopResp, error)
	Quit(ctx context.Context, in *QuitReq, opts ...grpc.CallOption) (*QuitResp, error)
}

type boomerSerClient struct {
	cc grpc.ClientConnInterface
}

func NewBoomerSerClient(cc grpc.ClientConnInterface) BoomerSerClient {
	return &boomerSerClient{cc}
}

func (c *boomerSerClient) Start(ctx context.Context, in *StartReq, opts ...grpc.CallOption) (*StartResp, error) {
	out := new(StartResp)
	err := c.cc.Invoke(ctx, "/pb.boomerSer/start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boomerSerClient) Rebalance(ctx context.Context, in *RebalanceReq, opts ...grpc.CallOption) (*RebalanceResp, error) {
	out := new(RebalanceResp)
	err := c.cc.Invoke(ctx, "/pb.boomerSer/rebalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boomerSerClient) Work(ctx context.Context, in *WorkReq, opts ...grpc.CallOption) (*WorkResp, error) {
	out := new(WorkResp)
	err := c.cc.Invoke(ctx, "/pb.boomerSer/work", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boomerSerClient) Master(ctx context.Context, in *MasterReq, opts ...grpc.CallOption) (*MasterResp, error) {
	out := new(MasterResp)
	err := c.cc.Invoke(ctx, "/pb.boomerSer/master", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boomerSerClient) Stop(ctx context.Context, in *StopReq, opts ...grpc.CallOption) (*StopResp, error) {
	out := new(StopResp)
	err := c.cc.Invoke(ctx, "/pb.boomerSer/stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boomerSerClient) Quit(ctx context.Context, in *QuitReq, opts ...grpc.CallOption) (*QuitResp, error) {
	out := new(QuitResp)
	err := c.cc.Invoke(ctx, "/pb.boomerSer/Quit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BoomerSerServer is the server API for BoomerSer service.
// All implementations must embed UnimplementedBoomerSerServer
// for forward compatibility
type BoomerSerServer interface {
	Start(context.Context, *StartReq) (*StartResp, error)
	Rebalance(context.Context, *RebalanceReq) (*RebalanceResp, error)
	Work(context.Context, *WorkReq) (*WorkResp, error)
	Master(context.Context, *MasterReq) (*MasterResp, error)
	Stop(context.Context, *StopReq) (*StopResp, error)
	Quit(context.Context, *QuitReq) (*QuitResp, error)
	mustEmbedUnimplementedBoomerSerServer()
}

// UnimplementedBoomerSerServer must be embedded to have forward compatible implementations.
type UnimplementedBoomerSerServer struct {
}

func (UnimplementedBoomerSerServer) Start(context.Context, *StartReq) (*StartResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedBoomerSerServer) Rebalance(context.Context, *RebalanceReq) (*RebalanceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rebalance not implemented")
}
func (UnimplementedBoomerSerServer) Work(context.Context, *WorkReq) (*WorkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Work not implemented")
}
func (UnimplementedBoomerSerServer) Master(context.Context, *MasterReq) (*MasterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Master not implemented")
}
func (UnimplementedBoomerSerServer) Stop(context.Context, *StopReq) (*StopResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedBoomerSerServer) Quit(context.Context, *QuitReq) (*QuitResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Quit not implemented")
}
func (UnimplementedBoomerSerServer) mustEmbedUnimplementedBoomerSerServer() {}

// UnsafeBoomerSerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BoomerSerServer will
// result in compilation errors.
type UnsafeBoomerSerServer interface {
	mustEmbedUnimplementedBoomerSerServer()
}

func RegisterBoomerSerServer(s grpc.ServiceRegistrar, srv BoomerSerServer) {
	s.RegisterService(&BoomerSer_ServiceDesc, srv)
}

func _BoomerSer_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoomerSerServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.boomerSer/start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoomerSerServer).Start(ctx, req.(*StartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoomerSer_Rebalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RebalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoomerSerServer).Rebalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.boomerSer/rebalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoomerSerServer).Rebalance(ctx, req.(*RebalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoomerSer_Work_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoomerSerServer).Work(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.boomerSer/work",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoomerSerServer).Work(ctx, req.(*WorkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoomerSer_Master_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MasterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoomerSerServer).Master(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.boomerSer/master",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoomerSerServer).Master(ctx, req.(*MasterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoomerSer_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoomerSerServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.boomerSer/stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoomerSerServer).Stop(ctx, req.(*StopReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoomerSer_Quit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoomerSerServer).Quit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.boomerSer/Quit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoomerSerServer).Quit(ctx, req.(*QuitReq))
	}
	return interceptor(ctx, in, info, handler)
}

// BoomerSer_ServiceDesc is the grpc.ServiceDesc for BoomerSer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BoomerSer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.boomerSer",
	HandlerType: (*BoomerSerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "start",
			Handler:    _BoomerSer_Start_Handler,
		},
		{
			MethodName: "rebalance",
			Handler:    _BoomerSer_Rebalance_Handler,
		},
		{
			MethodName: "work",
			Handler:    _BoomerSer_Work_Handler,
		},
		{
			MethodName: "master",
			Handler:    _BoomerSer_Master_Handler,
		},
		{
			MethodName: "stop",
			Handler:    _BoomerSer_Stop_Handler,
		},
		{
			MethodName: "Quit",
			Handler:    _BoomerSer_Quit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "boomer.proto",
}
