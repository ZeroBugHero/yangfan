// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.0--rc2
// source: install.proto

package tools

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ToolsPackageClient is the client API for ToolsPackage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ToolsPackageClient interface {
	InstallPackageStreamingMessage(ctx context.Context, in *InstallPackageReq, opts ...grpc.CallOption) (ToolsPackage_InstallPackageStreamingMessageClient, error)
}

type toolsPackageClient struct {
	cc grpc.ClientConnInterface
}

func NewToolsPackageClient(cc grpc.ClientConnInterface) ToolsPackageClient {
	return &toolsPackageClient{cc}
}

func (c *toolsPackageClient) InstallPackageStreamingMessage(ctx context.Context, in *InstallPackageReq, opts ...grpc.CallOption) (ToolsPackage_InstallPackageStreamingMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &ToolsPackage_ServiceDesc.Streams[0], "/tools.ToolsPackage/InstallPackageStreamingMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &toolsPackageInstallPackageStreamingMessageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ToolsPackage_InstallPackageStreamingMessageClient interface {
	Recv() (*InstallPackageRes, error)
	grpc.ClientStream
}

type toolsPackageInstallPackageStreamingMessageClient struct {
	grpc.ClientStream
}

func (x *toolsPackageInstallPackageStreamingMessageClient) Recv() (*InstallPackageRes, error) {
	m := new(InstallPackageRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ToolsPackageServer is the server API for ToolsPackage service.
// All implementations must embed UnimplementedToolsPackageServer
// for forward compatibility
type ToolsPackageServer interface {
	InstallPackageStreamingMessage(*InstallPackageReq, ToolsPackage_InstallPackageStreamingMessageServer) error
	mustEmbedUnimplementedToolsPackageServer()
}

// UnimplementedToolsPackageServer must be embedded to have forward compatible implementations.
type UnimplementedToolsPackageServer struct {
}

func (UnimplementedToolsPackageServer) InstallPackageStreamingMessage(*InstallPackageReq, ToolsPackage_InstallPackageStreamingMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method InstallPackageStreamingMessage not implemented")
}
func (UnimplementedToolsPackageServer) mustEmbedUnimplementedToolsPackageServer() {}

// UnsafeToolsPackageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ToolsPackageServer will
// result in compilation errors.
type UnsafeToolsPackageServer interface {
	mustEmbedUnimplementedToolsPackageServer()
}

func RegisterToolsPackageServer(s grpc.ServiceRegistrar, srv ToolsPackageServer) {
	s.RegisterService(&ToolsPackage_ServiceDesc, srv)
}

func _ToolsPackage_InstallPackageStreamingMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InstallPackageReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ToolsPackageServer).InstallPackageStreamingMessage(m, &toolsPackageInstallPackageStreamingMessageServer{stream})
}

type ToolsPackage_InstallPackageStreamingMessageServer interface {
	Send(*InstallPackageRes) error
	grpc.ServerStream
}

type toolsPackageInstallPackageStreamingMessageServer struct {
	grpc.ServerStream
}

func (x *toolsPackageInstallPackageStreamingMessageServer) Send(m *InstallPackageRes) error {
	return x.ServerStream.SendMsg(m)
}

// ToolsPackage_ServiceDesc is the grpc.ServiceDesc for ToolsPackage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ToolsPackage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tools.ToolsPackage",
	HandlerType: (*ToolsPackageServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InstallPackageStreamingMessage",
			Handler:       _ToolsPackage_InstallPackageStreamingMessage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "install.proto",
}
