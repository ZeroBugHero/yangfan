// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.0--rc2
// source: timer.proto

package tools

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TimerTaskClient is the client API for TimerTask service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TimerTaskClient interface {
	SetTaskStreamingMessage(ctx context.Context, in *SetTaskReq, opts ...grpc.CallOption) (TimerTask_SetTaskStreamingMessageClient, error)
}

type timerTaskClient struct {
	cc grpc.ClientConnInterface
}

func NewTimerTaskClient(cc grpc.ClientConnInterface) TimerTaskClient {
	return &timerTaskClient{cc}
}

func (c *timerTaskClient) SetTaskStreamingMessage(ctx context.Context, in *SetTaskReq, opts ...grpc.CallOption) (TimerTask_SetTaskStreamingMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &TimerTask_ServiceDesc.Streams[0], "/tools.TimerTask/SetTaskStreamingMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &timerTaskSetTaskStreamingMessageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TimerTask_SetTaskStreamingMessageClient interface {
	Recv() (*SetTaskRes, error)
	grpc.ClientStream
}

type timerTaskSetTaskStreamingMessageClient struct {
	grpc.ClientStream
}

func (x *timerTaskSetTaskStreamingMessageClient) Recv() (*SetTaskRes, error) {
	m := new(SetTaskRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TimerTaskServer is the server API for TimerTask service.
// All implementations must embed UnimplementedTimerTaskServer
// for forward compatibility
type TimerTaskServer interface {
	SetTaskStreamingMessage(*SetTaskReq, TimerTask_SetTaskStreamingMessageServer) error
	mustEmbedUnimplementedTimerTaskServer()
}

// UnimplementedTimerTaskServer must be embedded to have forward compatible implementations.
type UnimplementedTimerTaskServer struct {
}

func (UnimplementedTimerTaskServer) SetTaskStreamingMessage(*SetTaskReq, TimerTask_SetTaskStreamingMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method SetTaskStreamingMessage not implemented")
}
func (UnimplementedTimerTaskServer) mustEmbedUnimplementedTimerTaskServer() {}

// UnsafeTimerTaskServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TimerTaskServer will
// result in compilation errors.
type UnsafeTimerTaskServer interface {
	mustEmbedUnimplementedTimerTaskServer()
}

func RegisterTimerTaskServer(s grpc.ServiceRegistrar, srv TimerTaskServer) {
	s.RegisterService(&TimerTask_ServiceDesc, srv)
}

func _TimerTask_SetTaskStreamingMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SetTaskReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TimerTaskServer).SetTaskStreamingMessage(m, &timerTaskSetTaskStreamingMessageServer{stream})
}

type TimerTask_SetTaskStreamingMessageServer interface {
	Send(*SetTaskRes) error
	grpc.ServerStream
}

type timerTaskSetTaskStreamingMessageServer struct {
	grpc.ServerStream
}

func (x *timerTaskSetTaskStreamingMessageServer) Send(m *SetTaskRes) error {
	return x.ServerStream.SendMsg(m)
}

// TimerTask_ServiceDesc is the grpc.ServiceDesc for TimerTask service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TimerTask_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tools.TimerTask",
	HandlerType: (*TimerTaskServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SetTaskStreamingMessage",
			Handler:       _TimerTask_SetTaskStreamingMessage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "timer.proto",
}
